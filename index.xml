<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Unpro BUG</title>
    <link>https://unprobug.com/</link>
    <description>Recent content on Unpro BUG</description>
    <image>
      <url>https://unprobug.com/papermod-cover.png</url>
      <link>https://unprobug.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 14 Jul 2021 12:56:11 +0300</lastBuildDate><atom:link href="https://unprobug.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vagrant 入门</title>
      <link>https://unprobug.com/post/vagrant/vagrant_for_beginners/</link>
      <pubDate>Wed, 14 Jul 2021 12:56:11 +0300</pubDate>
      
      <guid>https://unprobug.com/post/vagrant/vagrant_for_beginners/</guid>
      <description>1.什么是vagrant 具体定义大家可以参见官方网站: https://www.vagrantup.com/.
那么大白话vagrant 到底是干嘛的, 它和docker有点像, 甚至部分操作用过docker 的人都会觉得似曾相识, 我们知道, docker 是来管理container的, 而vagrant是来管理虚拟机的, 比如你有个tomcat, 这个tomcat可以运行在docker容器上, 我们通过docker来管理这个容器, 而这个docker容器可以运行在VM上, 而vagrant可以是用来管理这个VM的, 当然, 这个只是一个宽泛的解释, 具体还是需要深入理解其本质.
2.如何工作 vagrant 通过不同的provider 来对虚拟机软件的API进行调用, 例如 virtualbox, 那么vagrant 通过virtualbox provider 来操作VM. 也就省去了我们手动创建的麻烦 how_does_vagrant_works
3. 安装  更多方式: https://www.vagrantup.com/downloads
  Linux/Ubuntu  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - sudo apt-add-repository &amp;quot;deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main&amp;quot; sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install vagrant   Windows 这里注意，如果你使用virtualbox或者vmware,　并且运行你普通使用创建vm没问题，那么你只需要根据上面的链接安装vagrant, 如果你不要 因为vagrant需要hyper-v, 所以你要打开自己的windows hyper-v, 传送门 然后根据上面的下载地址，下载安装</description>
    </item>
    
    <item>
      <title>[kubernetes] kustomize 入门例子</title>
      <link>https://unprobug.com/post/kubernetes/how_to_use_kustomize/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unprobug.com/post/kubernetes/how_to_use_kustomize/</guid>
      <description>0. 简介 kustomize 形如customize, 也就是k8s+customize, 它是kube资源描述文件的一种抽象工具.
 官方地址: https://kustomize.io/
 1. 为什么会用 kustomize kustomize它作用类似Helm, 它的实现方式和helm不同, helm是基于模版, 而kustomize是基于overlay 引擎. 通俗讲就是说, 你写一个普通的k8s资源描述yaml文件, 那么所有东西都是写死的, 此时如果你有helm, 你可以把部分值写成变量模版, 达到灵活的目的. 而kustomize更像是代码式的声明将,基代码和定制化代码重叠, 达到灵活的目的, 有时我们的配置比较简单且固定, 此时, 我们更希望一种快捷易于操作的方式, 那么此时就可以考虑kustomize, 当然这不代表kustomize只能写简单的东西.
我们来看一下需求是怎么来的:
假设我们有一个pod.yaml:
# pod.yaml contents apiVersion: v1 kind: Pod metadata: name: myapp-pod labels: app: myapp spec: containers: - name: web image: web:v.1.0 一切看起来都很好, 突然有一天, 老板说, 我们客户给了一个新环境, 我们得再部署一套应用到名叫XINHUANJING的新环境, 此时你可能会说, 好办, 看我粘贴复制大法, 只需改点点配置.
# pod.yaml contents apiVersion: v1 kind: Pod metadata: name: XINHUANJING-myapp-pod labels: app: myapp spec: containers: - name: web image: web:v.</description>
    </item>
    
    <item>
      <title>[博客搭建 0] - 新建并挂载自己的博客到github page</title>
      <link>https://unprobug.com/post/blog/hugo/how-to-create-blog/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unprobug.com/post/blog/hugo/how-to-create-blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[博客搭建 1] - 在goDaddy购买域名并绑定博客</title>
      <link>https://unprobug.com/post/blog/hugo/how-to-buy-a-domain-name/</link>
      <pubDate>Mon, 05 Jul 2021 18:08:23 +0300</pubDate>
      
      <guid>https://unprobug.com/post/blog/hugo/how-to-buy-a-domain-name/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[openstack] 如何开关vm及类似操作命令</title>
      <link>https://unprobug.com/post/openstack/openstack_server_status_operation_20210708/</link>
      <pubDate>Fri, 02 Jul 2021 11:55:41 +0300</pubDate>
      
      <guid>https://unprobug.com/post/openstack/openstack_server_status_operation_20210708/</guid>
      <description>往往这些操作是需要特定权限的, 确保操作时你拥有操作权限
 1. 暂停/取消暂停  这种状态下VM的状态会保存到RAM中, CUP则不会, 取消后会继续暂停前的状态  $ openstack server pause myInstance $ openstack server unpause myInstance 2. 挂起/取消挂起  这种状态类似物理机休眠, 状态会保存在文件中, CUP和RAM会被释放出来  $ openstack server pause myInstance $ openstack server resume myInstance 3. 开机/关机 $ openstack server start myInstance $ openstack server stop myInstance 4. 检查机器状态 4.1 简单查看, 即从所有实例中找目标机器 $ openstack server list | grep myInstance +--------------------------------------+-------------+---------+---------------------------------------------------------------------------------------------- | ID | Name | Status | Networks +--------------------------------------+-------------+---------+---------------------------------------------------------------------------------------------- | 27b48f01-aed0-47e6-b3ab-c22e1d7064f4 | master-01 | SHUTOFF | internal-net-01=10.</description>
    </item>
    
    <item>
      <title>[Spring][Webflux]如何找出webflux中的阻塞方法</title>
      <link>https://unprobug.com/post/java/spring/%E6%89%BE%E5%87%BAwebflux%E4%B8%AD%E7%9A%84%E9%98%BB%E5%A1%9E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 02 Jul 2021 11:55:41 +0300</pubDate>
      
      <guid>https://unprobug.com/post/java/spring/%E6%89%BE%E5%87%BAwebflux%E4%B8%AD%E7%9A%84%E9%98%BB%E5%A1%9E%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
    
    <item>
      <title>Copyright</title>
      <link>https://unprobug.com/copyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unprobug.com/copyright/</guid>
      <description>基本信息  作者: Jiang WU 权利人: Jiang WU 联系方式: johnwufr@gmail.com  版权声明  本版权声明承袭著作权法, 在此基础上额外声明以下规定. 本网站文章, 帖子等仅代表作者本人的观点, 本站不保证文章等内容的有效性. 属在本网站发表的文章（包括转帖）, 版权归原作者所有. 本网站会不定期的对本站的著作进行审查, 对于收录的文章, 会首先征求作者同意 本网站部分内容转载于合作站点或其他站点,但都会注明作/译者和原出处. 如有不妥之处,敬请指出 在征得本网站,以及作, 译者同意的情况下,本网站的作品允许非盈利性引用,于本站原创作品并请注明出处：&amp;ldquo;作者：Jiang WU 转载自 unprobug.com&amp;quot;字样, 于非本站原创作品请联系创作者版权问题, 以尊重作者的劳动成. 版权归原作/译者所. 未经允许,严禁转载. 对非法转载者,其行为包括未经允许的引用, 转载, 复制的片段, 改编, 演绎, 二次转载, 本站和作/译者保留采用法律手段追究的权利.  授权许可  非商业用途, 默认许可, 但需遵循以上版权声明 商业用途, 需要征得本网站许可, 并获得本网站签发的许可证书, 方可获得授权  商业洽谈  请通过邮箱联系本站管理员  免责声明  本站不负责在本站留言中的恶意诋毁, 污蔑, 及网络攻击等违法行为造成的后果  </description>
    </item>
    
    
  </channel>
</rss>
